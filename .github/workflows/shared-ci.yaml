name: Run CI

on:
  workflow_call:
    inputs:
      runtime_version:
        description: 'The default Java runtime version to run builds on'
        required: false
        type: number
        default: 11
      publishing_branch_regex:
        description: 'The regular expression to determine if a certain branch build should be published'
        required: false
        type: string
        default: 'master|main|trunk|(\d+\.(?:\d+\.)?x)'
      publish_snapshot_javadoc:
        description: 'Whether to publish Javadoc to the Javadoc site for snapshot builds'
        type: boolean
        required: false
        default: false
      publish_release_javadoc:
        description: 'Whether to publish Javadoc to the Javadoc site for release builds'
        type: boolean
        required: false
        default: true
      extra_gradle_params:
        description: 'Extra arguments to pass to all Gradle invocations'
        required: false
        type: string
        default: ''
      extra_gradle_publish_params:
        description: 'Extra arguments to pass to the Gradle invocation that publishes this project'
        required: false
        type: string
        default: ''
      javadoc_deploy_prefix:
        description: 'Extra subdirectory to publish javadoc under'
        required: false
        type: string
        default: ''
    secrets:
      SPONGE_MAVEN_SNAPSHOT_REPO_URL:
        description: 'Sponge Maven Snapshot URL'
        required: false
      SPONGE_MAVEN_RELEASE_REPO_URL:
        description: 'Sponge Maven Release URL'
        required: false
      SPONGE_MAVEN_REPO_USER:
        description: 'Sponge Maven Username'
        required: false
      SPONGE_MAVEN_REPO_PASSWORD:
        description: 'Sponge Maven Password'
        required: false
      SPONGE_MAVEN_OSSRH_USER:
        description: 'Sponge OSSRH Username'
        required: false
      SPONGE_MAVEN_OSSRH_PASSWORD:
        description: 'Sponge OSSHR Password'
        required: false
      SPONGE_SIGNING_KEY:
        description: 'Sponge Codesigning Key'
        required: false
      SPONGE_SIGNING_PASSWORD:
        description: 'Sponge Codesigning Password'
        required: false
      GRADLE_PLUGIN_PORTAL_KEY:
        description: 'Gradle Plugin Portal API Key'
        required: false
      GRADLE_PLUGIN_PORTAL_SECRET:
        description: 'Gradle Plugin Portal API Secret'
        required: false
      JAVADOC_PUBLISH_APP_ID:
        description: 'App id for JD publisher'
        required: false
      JAVADOC_PUBLISH_APP_KEY:
        description: 'App key for JD publisher'
        required: false

concurrency:
  group: "${{ github.workflow }}-${{ github.event.number || github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: "${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}"

    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: setup
        id: setup
        uses: SpongePowered/.github/.github/actions/setup-java-env@master
        with:
          runtime_version: ${{ inputs.runtime_version }}
          publishing_branch_regex: ${{ inputs.publishing_branch_regex }}

      # Actually build
      - name: Run Gradle Build
        run: ./gradlew ${{ inputs.extra_gradle_params }} build
      - name: Archive test results
        if: "${{ always() }}"
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: "${{ runner.os }}-test-results"
          path: |
            build/reports/
            */build/reports/

      # Then publish if we are all set up to do so
      - name: Determine status
        if: "${{ runner.os == 'Linux' }}"
        run: |
          VERSION=$(./gradlew :properties | awk '/^version:/ { print $2; }')
          if [ "$(echo $VERSION | grep '\-SNAPSHOT')" ]; then
            echo "STATUS=snapshot" >> $GITHUB_ENV
          else
            echo "STATUS=release" >> $GITHUB_ENV
          fi
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Publish with Gradle
        if: "${{ runner.os == 'Linux' && ((env.STATUS != 'release' && github.event_name == 'push' && steps.setup.outputs.publishing_branch != '') || (env.STATUS == 'release' && github.event_name == 'release')) }}"
        run: ./gradlew -PforceSign=true ${{ inputs.extra_gradle_params }} publish ${{ inputs.extra_gradle_publish_params }}
        env:
          ORG_GRADLE_PROJECT_githubPackagesUsername: "${{ github.actor }}"
          ORG_GRADLE_PROJECT_githubPackagesPassword: "${{ secrets.GITHUB_TOKEN }}"
          ORG_GRADLE_PROJECT_spongeSnapshotRepo: "${{ secrets.SPONGE_MAVEN_SNAPSHOT_REPO_URL }}"
          ORG_GRADLE_PROJECT_spongeReleaseRepo: "${{ secrets.SPONGE_MAVEN_RELEASE_REPO_URL }}"
          ORG_GRADLE_PROJECT_spongeUsername: "${{ secrets.SPONGE_MAVEN_REPO_USER }}"
          ORG_GRADLE_PROJECT_spongePassword: "${{ secrets.SPONGE_MAVEN_REPO_PASSWORD }}"
          ORG_GRADLE_PROJECT_sonatypeUsername: "${{ secrets.SPONGE_MAVEN_OSSRH_USER }}"
          ORG_GRADLE_PROJECT_sonatypePassword: "${{ secrets.SPONGE_MAVEN_OSSRH_PASSWORD }}"
          ORG_GRADLE_PROJECT_spongeSigningKey: "${{ secrets.SPONGE_SIGNING_KEY }}"
          ORG_GRADLE_PROJECT_spongeSigningPassword: "${{ secrets.SPONGE_SIGNING_PASSWORD }}"
          ORG_GRADLE_PROJECT_pluginPortalApiKey: "${{ secrets.GRADLE_PLUGIN_PORTAL_KEY }}"
          ORG_GRADLE_PROJECT_pluginPortalApiSecret: "${{ secrets.GRADLE_PLUGIN_PORTAL_SECRET }}"

      - name: Copy Javadoc for Publication
        if: "${{ runner.os == 'Linux' && ((env.STATUS != 'release' && inputs.publish_snapshot_javadoc && github.event_name == 'push' && steps.setup.outputs.publishing_branch != '') || (env.STATUS == 'release' && inputs.publish_release_javadoc && github.event_name == 'release')) }}"
        run: |
          mkdir -p build/publish-jd/${{ inputs.javadoc_deploy_prefix }}
          ./gradlew ${{ inputs.extra_gradle_params }} copyJavadoc --output build/publish-jd/${{ inputs.javadoc_deploy_prefix }}
      - name: "Authenticate for JD publication"
        if: "${{ runner.os == 'Linux' && ((env.STATUS != 'release' && inputs.publish_snapshot_javadoc && github.event_name == 'push' && steps.setup.outputs.publishing_branch != '') || (env.STATUS == 'release' && inputs.publish_release_javadoc && github.event_name == 'release')) }}"
        uses: "tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a" # v2.1.0
        id: jd-token
        with:
          app_id: "${{ secrets.JAVADOC_PUBLISH_APP_ID }}"
          private_key: "${{ secrets.JAVADOC_PUBLISH_APP_KEY }}"
          installation_retrieval_mode: "repository"
          installation_retrieval_payload: "SpongePowered/APIJavadocs"
      - name: Publish Javadoc
        if: "${{ runner.os == 'Linux' && ((env.STATUS != 'release' && inputs.publish_snapshot_javadoc && github.event_name == 'push' && steps.setup.outputs.publishing_branch != '') || (env.STATUS == 'release' && inputs.publish_release_javadoc && github.event_name == 'release')) }}"
        uses: JamesIves/github-pages-deploy-action@65b5dfd4f5bcd3a7403bbc2959c144256167464e # v4.5.0
        with:
          folder: build/publish-jd
          repository-name: SpongePowered/APIJavadocs
          token: ${{ steps.jd-token.outputs.token }}
          branch: data
          git-config-name: spongie-jd[bot]
          git-config-email: "167721471+spongie-jd[bot]@users.noreply.github.com"
          clean: false
          force: false
          commit-message: "Publishing javadoc for ${{ github.repository }} ${{ env.PROJECT_VERSION }}"
